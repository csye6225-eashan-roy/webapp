name: CI for building image

#on:
#  push:
#    branches:
#      - main

on:
  pull_request:
    branches: [main]

jobs:
#  packer_build_image:
#    runs-on: ubuntu-latest
#
#    env:
#      GOOGLE_APPLICATION_CREDENTIALS: /tmp/credentials.json
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Install PostgreSQL
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y postgresql postgresql-contrib
#          sudo systemctl start postgresql.service
#          sudo -u postgres psql -c "CREATE DATABASE users;"
#          sudo -u postgres psql -c "CREATE USER ${{ secrets.DATABASE_USER }} WITH ENCRYPTED PASSWORD '${{ secrets.DATABASE_PASSWORD }}';"
#          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE users TO ${{ secrets.DATABASE_USER }};"
#
#      - name: Create log directory
#        run: |
#          sudo mkdir -p /var/log/webapp
#          sudo touch /var/log/webapp/webapp.log
#          sudo chmod -R 777 /var/log/webapp
#          sudo chmod 666 /var/log/webapp/webapp.log
#
#      - name: Set up Google Cloud credentials
#        run: echo -e "$GCLOUD_CREDENTIALS" > /tmp/credentials.json
#        env:
#          GCLOUD_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIALS }}
#
#      - name: Set up Google Cloud SDK
#        uses: google-github-actions/auth@v2
#        with:
#          credentials_json: ${{ secrets.GCLOUD_CREDENTIALS }}
#          project_id: ${{ secrets.GCP_PROJECT_ID }}
#
#      - name: Build with Maven
#        run: mvn clean install -DskipTests # Compile the code and install dependencies without running tests
#
#      - name: Run tests
#        run: mvn test # Run your tests
#        env:
#          SPRING_DATASOURCE_URL: "jdbc:postgresql://localhost:5432/users"
#          SPRING_DATASOURCE_USERNAME: ${{ secrets.DATABASE_USER }}
#          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#          SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
#
#      - name: Set up Packer
#        uses: hashicorp/setup-packer@main
#        with:
#          version: latest
#
#      - name: Initialize Packer
#        run: packer init packer/template/webapp-gcp-custom-image.pkr.hcl
#
#      - name: Build Custom Image with Packer
#        run: |
#          packer build \
#            -var "jar_file=target/app-0.0.1-SNAPSHOT.jar" \
#            -var "project_id=${{ secrets.GCP_PROJECT_ID }}" \
#            -var "zone=us-central1-a" \
#            -var "vpc_network=default" \
#            -var "source_image_family=centos-stream-8" \
#            -var "image_family=custom-centos-8-image-webapp" \
#            -var "ssh_username=packer" \
#            -var "vm_size=e2-small" \
#            -var "database_user=${{ secrets.DATABASE_USER }}" \
#            -var "database_password=${{ secrets.DATABASE_PASSWORD }}" \
#            packer/template/webapp-gcp-custom-image.pkr.hcl

#      ______________________________________________________

#      Continuous Deployment
  update-instance-group:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Google Cloud credentials
        run: echo -e "$GCLOUD_CREDENTIALS" > /tmp/credentials.json
        env:
          GCLOUD_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Fetch latest packer image
        id: fetch-latest-image
        run: |
          LATEST_IMAGE_ID=$(gcloud compute images list \
              --project=${{ secrets.GCP_PROJECT_ID }} \
              --filter="family:custom-centos-8-image-webapp" \
              --format="csv[no-heading](name,creationTimestamp)" \
              | sort -t, -k2,2r \
              | head -n 1 \
              | cut -d, -f1)
          echo "LATEST_IMAGE_ID=$LATEST_IMAGE_ID" 
          echo "LATEST_IMAGE_ID=$LATEST_IMAGE_ID" >> $GITHUB_ENV
          
      - name: Create a new instance template
        run: |
          SUBNET_URL=$(gcloud compute networks subnets list --filter="name=${{ secrets.SUBNET }}" --project=${{ secrets.GCP_PROJECT_ID }} --regions=us-central1 --format="value(selfLink)")
          echo "Using subnet: $SUBNET_URL"
          gcloud compute instance-templates create ${{ secrets.INSTANCE_TEMPLATE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --machine-type=e2-medium \
            --network-interface=subnet="$SUBNET_URL" \
            --metadata=db_host=${{ secrets.DB_HOST }},db_name=${{ secrets.DB_NAME }},db_password='${{ secrets.DB_PASSWORD }}',db_user=${{ secrets.DB_USER }} \
            --metadata-from-file startup-script=packer/scripts/startup-script-instance-template.sh \
            --can-ip-forward \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account=${{ secrets.GCP_VM_SERVICE_ACCOUNT_EMAIL }} \
            --scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/pubsub,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write \
            --region=us-central1 \
            --tags=allow-https-to-vm-from-alb-tag,allow-8081-to-vm-from-alb-tag,allow-http-to-vm-from-alb-tag \
            --create-disk="auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=projects/${{ secrets.GCP_PROJECT_ID }}/global/images/${{ env.LATEST_IMAGE_ID }},kms-key=projects/${{ secrets.GCP_PROJECT_ID }}/locations/us-central1/keyRings/${{ secrets.KEY_RING }}/cryptoKeys/${{ secrets.KEY_NAME }},mode=rw,size=20,type=pd-balanced" \
            --reservation-affinity=any
      

      - name: Update Managed Instance Group with new template
        run: |
          gcloud compute instance-groups managed set-instance-template ${{ secrets.MIG_NAME }} \
            --template=${{ secrets.INSTANCE_TEMPLATE_NAME }} \
            --region=us-central1

      - name: Start Rolling Update on Managed Instance Group
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.MIG_NAME }} \
            --region=us-central1 \
            --type=proactive \
            --version=template=${{ secrets.INSTANCE_TEMPLATE_NAME }} \
            --max-unavailable=1 \
            --max-surge=3 \

      - name: Wait for the update to complete
        run: |
          gcloud compute instance-groups managed wait-until --stable ${{ secrets.MIG_NAME }} \
            --region=us-central1 \
            --timeout=600

         
